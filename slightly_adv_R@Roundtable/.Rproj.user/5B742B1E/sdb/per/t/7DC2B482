{
    "collab_server" : "",
    "contents" : "###################\n##  Control Flow ##\n###################\n\n\n## 01: Equality and greater or less ####\n\n#   How does one thing (in R: object) relate to another?\n#   R operator to enquire for equality of two objects:  ==\n#   Output will be TRUE or FALSE.\n\n# Ask R whether 4 is the same as 12 / 3\n\n# Ask R if 3 * 3 = 4\n\n# Ask whether TRUE is the same as FALSE\n\n# And enquire whether \"winter\" is the same as \"summer\"\n\n# Is 6 > 56?\n\n# Or is it smaller?\n\n# Check out if \"summer\" is greater than \"winter\" (and reconsider why)\n\n# ...and whether TRUE is less than FALSE\n\n# But is it greater or equal than FALSE?\n\n\n## 02: Equality of vectors and matrixes ####\n\n# Here's two vectors, with counts of tiger sharks and hammerhead sharks\n# on nine consecutive days:\ntiger  <-  c(0, 4, 1, 1, 4, 5, 2, 0, 9)\nhammerheads  <-  c(1, 2, 4, 5, 2, 0, 1, 1, 4)\n\n# On which days were there no tiger sharks in the water?\n\n# And on which days would you find more than 2 tiger sharks?\n\n# Check out when there were more hammerhead than tiger sharks.\n\n\n# Combining both vectors into a matrix:\nsharks <- matrix(c(tiger, hammerheads), nrow = 2, byrow = TRUE)\n\n# Explore that matrix. Use subsetting sharks[..., ...] to find out how many \n# hammerhead sharks were in the water on day 3.\nsharks[2, 3]\n\n# In one command: When was a single individual of tiger or hammerhead sharks observed?\nsharks == 1\n\n# On which days were there more than 2 tigers and/or hammerheads counted?\nsharks > 2\n\n# When were there more hammerheads counted than tiger sharks?\nsharks[2, ] > sharks[1, ]\n\n\n## 03: Logical operators ####\n\n# Is 12 smaller than 45 and greater than 24/3 ?\n12 < 45 & 12 > 24/3\n\n# Is 12 smaller than 45 and smaller than 24/3?\n12 < 45 & 45 < 24/3\n\n## Logical operators and vectors ##\n\n# Are the counts of tiger sharks on the second day between 2 and 5 (exclusive)?\ntiger[2] > 2  &  tiger[2] < 5\n\n# What about hammerhead sharks (inclusive)?\nhammerheads[2]  >=2  &  hammerheads[2]  <=5\n\n# Are tiger shark sightings on day 6 smaller than 2 or larger than 5 (exclusive)?\ntiger[6] < 2  |  tiger[6] > 5\n\n## 04 Logical operators and matrices ####\n\n# When was more than one tiger shark, but no hammerhead shark counted?\nsharks[1, ] > 1  &  sharks[2, ] == 0 \n\n# When were 2 or more specimen of both species counted simultaneouly?\nsharks[1, ] >= 2  &  sharks[2, ] >= 2\n\n# On which days were there 4 individuals of one or both species?\nsharks[1, ] > 4  |  sharks[2, ] > 4\n\n# For which species and days in the sharks matrix is the count between 3 (inclusive)\n# and 5 (exclusive)?\nsharks >= 3  &  sharks < 5\n\n# Think before you execute:\n# What will be the output of \nv1 <- 12\nv2 <- 7\n!(!(v1 < 6) & !!(v2 > 17))\n\n## Here are some more sharks for your matrix:\nlemon <- c(5, 4, 1, 1, 3, 5, 2, 8, 8)\nbull <- c(3, 3, 6, 1, 9, 0, 2, 0, 8)\nblacktip <- c(0, 1, 2, 1, 4, 0, 2, 0, 2)\ncookiecutter <- c(1, 0, 2, 2, 0, 0, 1, 0, 3)\nsharks <- matrix(c(tiger, hammerheads, lemon, bull, blacktip, cookiecutter),\n                 nrow = 6, byrow = TRUE)\ncolnames(sharks) <- paste0('day_', seq(from = 1, to = dim(sharks)[2]))\nrownames(sharks) <- c(\"tiger\", \"hammerheads\", \"lemon\", \"bull\", \"blacktip\", \"cookiecutter\")\nsharks\n\n# Save counts for all species on day 5 in a vector. Print the vector to the console.\nsharks5 <- sharks[ , 5]\nsharks5\n\n# Use that day 5 vector to create a new vector that is TRUE for counts below 2\n# or above 4 (both inclusive). Again, print that vector to the console.\nsharks5_logic <- sharks5 <= 2  |  sharks5 >= 4\nsharks5_logic\n\n# Using that vecor, count how often these particularly high or low counts\n# occured on day 5. That means: use the sum() function to count the numbers\n# of TRUE in the vector created above. The sum() function does that pretty\n# much automatically.\nsum(sharks5_logic)\n\n# And now solve it all in one single line of code.\nsum(sharks[ ,5] <= 2 | sharks[ ,5] >= 4)\n\n\n## 05: Conditional execution ####\n\n# Here is the standard >if  recepy:\n\n#  if(condition) {\n#  this_will_happen\n#}\n\n# Use it to write an if condition that prints out \"Warm and sunny.\" if the \n# object \"season\" equal to \"summer\"\nseason <- 'summer'\n\n# Add an else condition to that to print out \"Cold and rainy.\" whenever the\n# season is not summer. Then check the printout in the console when assigning\n# different values to 'season', such as 'spring' or 'winter'.\n# Also, think about what would happen when you delete the object 'season'\n# prior to executing your if-else condition. And then try it out:\nrm(season)\n# Now, run your conditional statement.\n\n# Congratulations! Your weather and shark expertise has made you the responsable\n# for shark forecasts and warnings on Coder Island's favourite surfing beach!\n# Write an if-statement that prints \"Shark alert!\" whenever shark_count is larger 0.\nshark_count <- 2\n\n# Add an else statement that prints \"All calm.\" when this is not the case. Test\n# it with multiple values of shark_count.\n\n# Now add else if code that prints \"Come see lots of sharks!\" when shark_count\n# exceeds 4 individuals. Again: Test it out with multiple values of shark_count.\n\n# What's happening here? \n# Once R has found a condition to be TRUE and has executed the  corresponding\n# expression, it will regard the set of statements as fullfilled and will \n# ignores the rest of the commands.\n# Can you fix your set of conditional statements to account for that? A hint:\n# \"Shark alert!\" should be printed out if shark_count is between 1 and 4.\n\n\n# Imagine that you can predict a shark_probability_score based on weather\n# observation, that is in particular temperature and wind speed.\n# Write a control flow that compiled a shark_probability_score based on\n# temperature and wind speed measurements, and prints the appropriate warning.\ntemperature <- 25\nwind_speed  <- 8\n# If either temperature or wind speed are above 22, set the shark_probability_score\n# to half the sum of temperature and wind speed.\n# Else, if both are below or equal to 18, shark_probability_score should be three\n# times the sum of temperature and wind speed.\n# In all other cases, shark_probability_score should be simply the sum of both.\n# Make sure you test your control flow with multiple values for temperature and\n# wind speed.\n\n\n# Last but not least, it's time to build the automated warning system:\n# If the shark_probability_score is lower 20, there is probably no sharks in\n# the bay (\"All calm!\"). A touristically relevant amount of them (\"Come see\n# lots of sharks!\") would probably be present if shark_probability_score\n# exceeds 80. And if it is anywhere between: \"Shark alert!\". \n\n\n#############\n##  Loops  ##\n#############\n\n## 01: while loops ####\n\n# With the following recipe:\n# >  while (condition) {\n# >    expr\n# >  }\n# And the initial setting for the temperature in an experimental tank\naquarium_temperature <- 28\n# code a while loop that prints out a warning (\"Temperature too high!\") and\n# reduces the temperature in the tank by one degree when aquarium_temperature\n# exceeds 25 degrees.\n\n# Consider (and test out) what happens with your while loop if you would\n# not include the temperature reduction statement.\n\n# While a decrease of one degree through the temperature management system you\n# have coded works well for slightly warmer waters, your tank system will run\n# into serious trouble once the temperature exceeds 30 degrees. Thus, use if\n# and else statementes inside the while loop to create the very behaviour you\n# did before, but additionally have \"Temperature critically high!\" if it\n# exceeds 30 degrees, and have temperature reduced by 3 degrees.\naquarium_temperature <- 37\n# Mind the order of the execution in the if - else statements, bearing in mind\n# that, other than a while loop, which is executed as long as the condition\n# applies (is TRUE), if - else statements are executed and then quit as soon \n# as the first condition is fulfilled.\n\n# Add a printout of the current temperature to the while loop. Use the paste \n# function for that:\npaste0('Current temperature is ', aquarium_temperature, 'degrees.')\n\n# Unfortunately, your lab's cooling system can only handle aquarium temperatures\n# up to 40 degrees. If the tank arrives or exceeds that temperature, the cooling\n# system might take damage if switched on. It is then better to sacrifice the\n# individual aquarium rather than risking that the entire lab may break down.\n# In your temperature management code, include a  > break  argument that shuts\n# down the while loop if aquarium_temperature reaches or exceeds 40 degrees.\n\n# Enter a warning printout (text up to you!) that is printed when temperature\n# reaches or exceeds 40 degrees. That text should be printed before the loop breaks.\n\n\n## 02: for loops ####\n\n# Build a for loop that iterates over the names of the shark species in the \n# table  sharks  that was created earlier. For each species, have the name \n# printed.\n\n# Add a break command that stops execution of the loop when the species name\n# is \"blacktip\".\n\n\n## 03: Nested for loops ####\n\n# Here's the recipe of how a nested for loop works:\n# > for (i in sequence1) {\n# >   for (j in sequence2) {\n# >     expression\n# >   }\n# > }\n# This nested for loop is useful for multidimensional objects, such as a matrix.\n# It will first iterate through the dimension in the inner part of the loop for\n# all first elements of the dimension of the outer loop and then do the\n# same for the second element of the dimension of the outer loop.\n# No worries, that will get clearer once you apply a nested for loop.\n# \n# For a subset of the sharks data\nsharks_subset <- sharks[3:4, 1:3]\n# that has 2 rows\nnrow(sharks_subset)\n# and 3 columns\nncol(sharks_subset)\n# write a nested for loops which inner loop iterates over all\n# columns (1:ncol(sharks_subset)) and which outer loops iterates over all \n# rows (1:nrow(sharks_subset)) that prints out the respective shark counts.\n\n# Well done. But that sequence of numbers is actually not too informative.\n# Add a paste() command inside the printout command above to indicate the\n# row (with index i) and column (with index j) that the observation stems from:\n# The eventual format should be \"xy sharks were recorded in row i and column j.\".\n\n# Let's make use of the conditional executions you have already mastered\n# earlier: if and else. Use them to print out \"Many sharks were recorded in\n# row i and column j.\" if xy (that is, the count in row i and column j as\n# selected through the nested for loop above) is larger than 4. In all other\n# cases, leave the printout as it was (\"xy sharks were recorded in row i and\n# column j.\")\n\n# Excellent. Now add an if else command to print out \"A single shark only was\n# recorded for row i and column j.\". Leave the above printouts as they were.\n# Careful about the order of execution, bear in mind that if-else-statements\n# will stop once the first condition is fulfilled.\n\n# Master it: Instead of printing \"row i\" and \"column j\", make the printouts read\n# like this \"4 lemon sharks were recorded on day_2\" or \"6 bull sharks were\n# recorded on day_2\" !\n# Use the functions\ncolnames(sharks_subset)  # and\nrownames(sharks_subset)\n# together with indexing\ncolnames(sharks_subset)[2]\n# in your paste() or paste0() commands to create these printouts.\n\n# Take a moment to be proud of your loop.\n\n",
    "created" : 1517910395537.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4069295978",
    "id" : "7DC2B482",
    "lastKnownWriteTime" : 1518104160,
    "last_content_update" : 1518104160514,
    "path" : "D:/SYNC/01-ZMT/Workshops/20180209-slightly_adv_R@Roundtable/slightly_adv_R@Roundtable/Solutions--slightly_adv_R_01.R",
    "project_path" : "Solutions--slightly_adv_R_01.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}