# and 5 (exclusive)?
# Think before you execute:
# What will be the output of
v1 <- 12
v2 <- 7
!(!(v1 < 6) & !!(v2 > 17))
## Here are some more sharks for your matrix:
lemon <- c(5, 4, 1, 1, 3, 5, 2, 8, 8)
bull <- c(3, 3, 6, 1, 9, 0, 2, 0, 8)
blacktip <- c(0, 1, 2, 1, 4, 0, 2, 0, 2)
cookiecutter <- c(1, 0, 2, 2, 0, 0, 1, 0, 3)
sharks <- matrix(c(tiger, hammerheads, lemon, bull, blacktip, cookiecutter),
nrow = 6, byrow = TRUE)
colnames(sharks) <- paste0('day_', seq(from = 1, to = dim(sharks)[2]))
rownames(sharks) <- c("tiger", "hammerheads", "lemon", "bull", "blacktip", "cookiecutter")
# Save counts for all species on day 5 in a vector.
# Create a new vector that is TRUE for counts below 2 and above 4 (both inclusive).
# Using that vecor, count how often these particularly high or low counts occured on day 5.
# And now solve it all in one line.
if(season == winter) {
print(“Damn cold!”)
}
print("Damn cold!")
season == winter
season <- 'summer'
if(season == winter) {
print("Damn cold!")
}
if(season == "winter") {
print("Damn cold!")
}
if(season == "winter") {
print("Damn cold!")
}
shark_count <- 2
18+18
36*3
?while
?while()
?while
??while
()
??while()
?while
paste0('Current temperature is ', temperature)
aquarium_temperature <- 28
paste0('Current temperature is ', aquarium_temperature)
paste0('Current temperature is ', aquarium_temperature, '.')
paste0('Current temperature is ', aquarium_temperature, '°C.')
###################
##  Control Flow ##
###################
## 01: Equality and greater or less ####
#   How does one thing (in R: object) relate to another?
#   R operator to enquire for equality of two objects:  ==
#   Output will be TRUE or FALSE.
# Ask R whether 4 is the same as 12 / 3
# Ask R if 3 * 3 = 4
# Ask whether TRUE is the same as FALSE
# And enquire whether "winter" is the same as "summer"
# Is 6 > 56?
# Or is it smaller?
# Check out if "summer" is greater than "winter" (and reconsider why)
# ...and whether TRUE is less than FALSE
# But is it greater or equal than FALSE?
## 02: Equality of vectors and matrixes ####
# Here's two vectors, with counts of tiger sharks and hammerhead sharks
# on nine consecutive days:
tiger  <-  c(0, 4, 1, 1, 4, 5, 2, 0, 9)
hammerheads  <-  c(1, 2, 4, 5, 2, 0, 1, 1, 4)
# On which days were there no tiger sharks in the water?
# And on which days would you find more than 2 tiger sharks?
# Check out when there were more hammerhead than tiger sharks.
# Combining both vectors into a matrix:
sharks <- matrix(c(tiger, hammerheads), nrow = 2, byrow = TRUE)
# Explore that matrix. Use subsetting [..., ..., ...] to find out how many
# hammerhead sharks were in the water on day 3.
# In one command: When was a single individual of tiger or hammerhead sharks observed?
# On which days were there more than 2 tigers and/or hammerheads counted?
# When were there more hammerheads counted than tiger sharks?
## 03: Logical operators ####
# Is 12 smaller than 45 and greater than 24/3 ?
# Is 12 smaller than 45 and smaller than 24/3?
## Logical operators and vectors ##
# Are the counts of tiger sharks on the second day between 2 and 5 (exclusive)?
# What about hammerhead sharks (inclusive)?
# Are tiger shark sightings on day 6 smaller than 2 or larger than 5 (exclusive)?
## 04 Logical operators and matrices ####
# When was more than one tiger shark, but no hammerhead shark counted?
# When were 2 or more specimen of both species counted simultaneouly?
# On which days were there 4 individuals of one or both species?
# For which species and days in the sharks matrix is the count between 3 (inclusive)
# and 5 (exclusive)?
# Think before you execute:
# What will be the output of
v1 <- 12
v2 <- 7
!(!(v1 < 6) & !!(v2 > 17))
## Here are some more sharks for your matrix:
lemon <- c(5, 4, 1, 1, 3, 5, 2, 8, 8)
bull <- c(3, 3, 6, 1, 9, 0, 2, 0, 8)
blacktip <- c(0, 1, 2, 1, 4, 0, 2, 0, 2)
cookiecutter <- c(1, 0, 2, 2, 0, 0, 1, 0, 3)
sharks <- matrix(c(tiger, hammerheads, lemon, bull, blacktip, cookiecutter),
nrow = 6, byrow = TRUE)
colnames(sharks) <- paste0('day_', seq(from = 1, to = dim(sharks)[2]))
rownames(sharks) <- c("tiger", "hammerheads", "lemon", "bull", "blacktip", "cookiecutter")
# Save counts for all species on day 5 in a vector.
# Create a new vector that is TRUE for counts below 2 and above 4 (both inclusive).
# Using that vecor, count how often these particularly high or low counts occured on day 5.
# And now solve it all in one single line of code.
## 05: Conditional execution ####
# Here is the standard >if  recepy:
#  if(condition) {
#  this_will_happen
#}
# Use it to write an if condition that prints out "Warm and sunny." if the
# object "season" equal to "summer"
season <- 'summer'
# Add an else condition to that to print out "Cold and rainy." whenever the
# season is not summer. Then check the printout in the console when assigning
# different values to 'season', such as 'spring' or 'winter'.
# Also, think about what would happen when you delete the object 'season'
# prior to executing your if-else condition. And then try it out:
rm(season)
# Now, run your conditional statement.
# Congratulations! Your weather and shark expertise has made you the responsable
# for shark forecasts and warnings on Coder Island's favourite surfing beach!
# Write an if-statement that prints "Shark alert!" whenever shark_count is larger 0.
shark_count <- 2
# Add an else statement that prints "All calm." when this is not the case. Test
# it with multiple values of shark_count.
# Now add else if code that prints "Come see lots of sharks!" when shark_count
# exceeds 4 individuals. Again: Test it out with multiple values of shark_count.
# What's happening here?
# Once R has found a condition to be TRUE and has executed the  corresponding
# expression, it will regard the set of statements as fullfilled and will
# ignores the rest of the commands.
# Can you fix your set of conditional statements to account for that? A hint:
# "Shark alert!" should be printed out if shark_count is between 1 and 4.
# Imagine that you can predict a shark_probability_score based on weather
# observation, that is in particular temperature and wind speed.
# Write a control flow that compiled a shark_probability_score based on
# temperature and wind speed measurements, and prints the appropriate warning.
temperature <- 25
wind_speed  <- 8
# If either temperature or wind speed are above 22, set the shark_probability_score
# to half the sum of temperature and wind speed.
# Else, if both are below or equal to 18, shark_probability_score should be three
# times the sum of temperature and wind speed.
# In all other cases, shark_probability_score should be simply the sum of both.
# Make sure you test your control flow with multiple values for temperature and
# wind speed.
# Last but not least, it's time to build the automated warning system:
# If the shark_probability_score is lower 20, there is probably no sharks in
# the bay ("All calm!"). A touristically relevant amount of them ("Come see
# lots of sharks!") would probably be present if shark_probability_score
# exceeds 80. And if it is anywhere between: "Shark alert!".
#############
##  Loops  ##
#############
## 01: while loops ####
# With the following recipe:
# >  while (condition) {
# >    expr
# >  }
# And the initial setting for the temperature in an experimental tank
aquarium_temperature <- 28
# code a while loop that prints out a warning ("Temperature too high!") and
# reduces the temperature in the tank by one degree when aquarium_temperature
# exceeds 25 degrees.
# Consider (and test out) what happens with your while loop if you would
# not include the temperature reduction statement.
# While a decrease of one degree through the temperature management system you
# have coded works well for slightly warmer waters, your tank system will run
# into serious trouble once the temperature exceeds 30 degrees. Thus, use if
# and else statementes inside the while loop to create the very behaviour you
# did before, but additionally have "Temperature critically high!" if it
# exceeds 30 degrees, and have temperature reduced by 3 degrees.
aquarium_temperature <- 37
# Mind the order of the execution in the if - else statements, bearing in mind
# that, other than a while loop, which is executed as long as the condition
# applies (is TRUE), if - else statements are executed and then quit as soon
# as the first condition is fulfilled.
# Add a printout of the current temperature to the while loop. Use the paste
# function for that:
paste0('Current temperature is ', aquarium_temperature, '°C.')
# Unfortunately, your lab's cooling system can only handle aquarium temperatures
# up to 40 degrees. If the tank arrives or exceeds that temperature, the cooling
# system might take damage if switched on. It is then better to sacrifice the
# individual aquarium rather than risking that the entire lab may break down.
# In your temperature management code, include a  > break  argument that shuts
# down the while loop if aquarium_temperature reaches or exceeds 40 degrees.
# Enter a warning printout (text up to you!) that is printed when temperature
# reaches or exceeds 40°C. That text should be printed before the loop breaks.
## 02: for loops ####
sharks
typeof(sharks)
is.element("b", "blacktip")
substring("blacktip", 1)
substring("blacktip", 1, 1)
length("bull")
sharks  <-  list(“tiger”, “hammerhead”, 			       “lemon”, “bull”)
sharks  <-  list("tiger", "hammerhead", 			       "lemo"”, "bull")
sharks  <-  list("tiger", "hammerhead","lemon", "bull")
for(i in 1:length(sharks))  {
print(paste0(sharks[i], " is the ",
i, "th entry in the sharks list")
}
for(i in 1:length(sharks))  {
print(paste0(sharks[i], " is the ",
i, "th entry in the sharks list"))
}
for(i in 1:length(sharks))  {
print(paste0(sharks[i], " is #", i, "in the sharks list"))
}
print(paste0(sharks[i], " is #", i, " in the sharks list"))
for(i in 1:length(sharks))  {
print(paste0(sharks[i], " is #", i, " in the sharks list"))
}
sharks
rm(list=ls())
###################
##  Control Flow ##
###################
## 01: Equality and greater or less ####
#   How does one thing (in R: object) relate to another?
#   R operator to enquire for equality of two objects:  ==
#   Output will be TRUE or FALSE.
# Ask R whether 4 is the same as 12 / 3
# Ask R if 3 * 3 = 4
# Ask whether TRUE is the same as FALSE
# And enquire whether "winter" is the same as "summer"
# Is 6 > 56?
# Or is it smaller?
# Check out if "summer" is greater than "winter" (and reconsider why)
# ...and whether TRUE is less than FALSE
# But is it greater or equal than FALSE?
## 02: Equality of vectors and matrixes ####
# Here's two vectors, with counts of tiger sharks and hammerhead sharks
# on nine consecutive days:
tiger  <-  c(0, 4, 1, 1, 4, 5, 2, 0, 9)
hammerheads  <-  c(1, 2, 4, 5, 2, 0, 1, 1, 4)
# On which days were there no tiger sharks in the water?
# And on which days would you find more than 2 tiger sharks?
# Check out when there were more hammerhead than tiger sharks.
# Combining both vectors into a matrix:
sharks <- matrix(c(tiger, hammerheads), nrow = 2, byrow = TRUE)
# Explore that matrix. Use subsetting [..., ..., ...] to find out how many
# hammerhead sharks were in the water on day 3.
# In one command: When was a single individual of tiger or hammerhead sharks observed?
# On which days were there more than 2 tigers and/or hammerheads counted?
# When were there more hammerheads counted than tiger sharks?
## 03: Logical operators ####
# Is 12 smaller than 45 and greater than 24/3 ?
# Is 12 smaller than 45 and smaller than 24/3?
## Logical operators and vectors ##
# Are the counts of tiger sharks on the second day between 2 and 5 (exclusive)?
# What about hammerhead sharks (inclusive)?
# Are tiger shark sightings on day 6 smaller than 2 or larger than 5 (exclusive)?
## 04 Logical operators and matrices ####
# When was more than one tiger shark, but no hammerhead shark counted?
# When were 2 or more specimen of both species counted simultaneouly?
# On which days were there 4 individuals of one or both species?
# For which species and days in the sharks matrix is the count between 3 (inclusive)
# and 5 (exclusive)?
# Think before you execute:
# What will be the output of
v1 <- 12
v2 <- 7
!(!(v1 < 6) & !!(v2 > 17))
## Here are some more sharks for your matrix:
lemon <- c(5, 4, 1, 1, 3, 5, 2, 8, 8)
bull <- c(3, 3, 6, 1, 9, 0, 2, 0, 8)
blacktip <- c(0, 1, 2, 1, 4, 0, 2, 0, 2)
cookiecutter <- c(1, 0, 2, 2, 0, 0, 1, 0, 3)
sharks <- matrix(c(tiger, hammerheads, lemon, bull, blacktip, cookiecutter),
nrow = 6, byrow = TRUE)
colnames(sharks) <- paste0('day_', seq(from = 1, to = dim(sharks)[2]))
rownames(sharks) <- c("tiger", "hammerheads", "lemon", "bull", "blacktip", "cookiecutter")
# Save counts for all species on day 5 in a vector.
# Create a new vector that is TRUE for counts below 2 and above 4 (both inclusive).
# Using that vecor, count how often these particularly high or low counts occured on day 5.
# And now solve it all in one single line of code.
## 05: Conditional execution ####
# Here is the standard >if  recepy:
#  if(condition) {
#  this_will_happen
#}
# Use it to write an if condition that prints out "Warm and sunny." if the
# object "season" equal to "summer"
season <- 'summer'
# Add an else condition to that to print out "Cold and rainy." whenever the
# season is not summer. Then check the printout in the console when assigning
# different values to 'season', such as 'spring' or 'winter'.
# Also, think about what would happen when you delete the object 'season'
# prior to executing your if-else condition. And then try it out:
rm(season)
# Now, run your conditional statement.
# Congratulations! Your weather and shark expertise has made you the responsable
# for shark forecasts and warnings on Coder Island's favourite surfing beach!
# Write an if-statement that prints "Shark alert!" whenever shark_count is larger 0.
shark_count <- 2
# Add an else statement that prints "All calm." when this is not the case. Test
# it with multiple values of shark_count.
# Now add else if code that prints "Come see lots of sharks!" when shark_count
# exceeds 4 individuals. Again: Test it out with multiple values of shark_count.
# What's happening here?
# Once R has found a condition to be TRUE and has executed the  corresponding
# expression, it will regard the set of statements as fullfilled and will
# ignores the rest of the commands.
# Can you fix your set of conditional statements to account for that? A hint:
# "Shark alert!" should be printed out if shark_count is between 1 and 4.
# Imagine that you can predict a shark_probability_score based on weather
# observation, that is in particular temperature and wind speed.
# Write a control flow that compiled a shark_probability_score based on
# temperature and wind speed measurements, and prints the appropriate warning.
temperature <- 25
wind_speed  <- 8
# If either temperature or wind speed are above 22, set the shark_probability_score
# to half the sum of temperature and wind speed.
# Else, if both are below or equal to 18, shark_probability_score should be three
# times the sum of temperature and wind speed.
# In all other cases, shark_probability_score should be simply the sum of both.
# Make sure you test your control flow with multiple values for temperature and
# wind speed.
# Last but not least, it's time to build the automated warning system:
# If the shark_probability_score is lower 20, there is probably no sharks in
# the bay ("All calm!"). A touristically relevant amount of them ("Come see
# lots of sharks!") would probably be present if shark_probability_score
# exceeds 80. And if it is anywhere between: "Shark alert!".
#############
##  Loops  ##
#############
## 01: while loops ####
# With the following recipe:
# >  while (condition) {
# >    expr
# >  }
# And the initial setting for the temperature in an experimental tank
aquarium_temperature <- 28
# code a while loop that prints out a warning ("Temperature too high!") and
# reduces the temperature in the tank by one degree when aquarium_temperature
# exceeds 25 degrees.
# Consider (and test out) what happens with your while loop if you would
# not include the temperature reduction statement.
# While a decrease of one degree through the temperature management system you
# have coded works well for slightly warmer waters, your tank system will run
# into serious trouble once the temperature exceeds 30 degrees. Thus, use if
# and else statementes inside the while loop to create the very behaviour you
# did before, but additionally have "Temperature critically high!" if it
# exceeds 30 degrees, and have temperature reduced by 3 degrees.
aquarium_temperature <- 37
# Mind the order of the execution in the if - else statements, bearing in mind
# that, other than a while loop, which is executed as long as the condition
# applies (is TRUE), if - else statements are executed and then quit as soon
# as the first condition is fulfilled.
# Add a printout of the current temperature to the while loop. Use the paste
# function for that:
paste0('Current temperature is ', aquarium_temperature, '°C.')
# Unfortunately, your lab's cooling system can only handle aquarium temperatures
# up to 40 degrees. If the tank arrives or exceeds that temperature, the cooling
# system might take damage if switched on. It is then better to sacrifice the
# individual aquarium rather than risking that the entire lab may break down.
# In your temperature management code, include a  > break  argument that shuts
# down the while loop if aquarium_temperature reaches or exceeds 40 degrees.
# Enter a warning printout (text up to you!) that is printed when temperature
# reaches or exceeds 40°C. That text should be printed before the loop breaks.
## 02: for loops ####
# Build a for loop that iterates over the names of the shark species in the
# table  sharks  that was created earlier. For each species, have the name
# printed.
# Add a break command that stops execution of the loop when the species name
# is "blacktip".
## 03: Nested for loops ####
# Here's the recipe of how a nested for loop works:
# > for (i in sequence1) {
# >   for (j in sequence2) {
# >     expression
# >   }
# > }
# This nested for loop is useful for multidimensional objects, such as a matrix.
# It will first iterate through the dimension in the inner part of the loop for
# all first elements of the dimension of the outer loop and then do the
# same for the second element of the dimension of the outer loop.
# No worries, that will get clearer once you apply a nested for loop.
#
# For
sharks
sharks_subset <- sharks[3:4, 1:3]
sharks_subset
nrow(sharks_subset)
ncol(sharks_subset)
ncol(sharks_subset)
colnames(sharks_subset)
colnames(sharks_subset)[2]
rownames(sharks_subset)
colnames(sharks_subset)[2]
###################
##  Control Flow ##
###################
## 01: Equality and greater or less ####
#   How does one thing (in R: object) relate to another?
#   R operator to enquire for equality of two objects:  ==
#   Output will be TRUE or FALSE.
# Ask R whether 4 is the same as 12 / 3
# Ask R if 3 * 3 = 4
# Ask whether TRUE is the same as FALSE
# And enquire whether "winter" is the same as "summer"
# Is 6 > 56?
# Or is it smaller?
# Check out if "summer" is greater than "winter" (and reconsider why)
# ...and whether TRUE is less than FALSE
# But is it greater or equal than FALSE?
## 02: Equality of vectors and matrixes ####
# Here's two vectors, with counts of tiger sharks and hammerhead sharks
# on nine consecutive days:
tiger  <-  c(0, 4, 1, 1, 4, 5, 2, 0, 9)
hammerheads  <-  c(1, 2, 4, 5, 2, 0, 1, 1, 4)
# On which days were there no tiger sharks in the water?
# And on which days would you find more than 2 tiger sharks?
# Check out when there were more hammerhead than tiger sharks.
# Combining both vectors into a matrix:
sharks <- matrix(c(tiger, hammerheads), nrow = 2, byrow = TRUE)
# Explore that matrix. Use subsetting [..., ..., ...] to find out how many
# hammerhead sharks were in the water on day 3.
sharks
sharks[2, 3]
sharks == 1
sharks > 2
sharks[2, ] > sharks[1, ]
sharks
sharks == 1
sharks == 1  # or
sharks[1, ]  == 1 | sharks[2, ]  == 1
sharks[1, ] > 2 |  sharks[2, ] > 2
sharks[2, ] > sharks[1, ]
seasons <- c('spring', 'summer', 'autumn', 'winter')
seasons
seasons[2]
seasons[4]
temp <- c('medium', 'high', 'medium', 'low')
temp[2]
dat <- table(rbind(seasons, temp))
dat
dat <- table(rbind(c(seasons, temp)))
dat
dat[2]
dat[2,1]
sharks
sharks[1, 2]
sharks[1, ]
sharks[1, 1&2&3&4]
sharks[1, 1&2]
sharks[1, 1|2]
sharks[1, ]
sharks[1, ] > 2
sharks[2, 3]
sharks[2, 3]
sharks
sharks == 1  # or (better)
sharks[1, ]  == 1 | sharks[2, ]  == 1
sharks > 2  # or (better)
sharks[1, ] > 2  |  sharks[2, ] > 2
hammerheads > tiger
12 < 45 & 12 > 24/3
12 < 45 & 45 < 24/3
tiger[2] > 2  &  tiger[2] < 5
hammerheads[2]  >=2  &  hammerheads[2]  <=5
hammerheads[2]
tiger[6] < 2  |  tiger[6] > 5
tiger[6]
sharks[1, ] > 1  &  sharks[2, ] == 0
sharks[1, ] >= 2  &  sharks[2, ] >= 2
sharks
sharks >= 3  &  sharks <5
lemon <- c(5, 4, 1, 1, 3, 5, 2, 8, 8)
bull <- c(3, 3, 6, 1, 9, 0, 2, 0, 8)
blacktip <- c(0, 1, 2, 1, 4, 0, 2, 0, 2)
cookiecutter <- c(1, 0, 2, 2, 0, 0, 1, 0, 3)
sharks <- matrix(c(tiger, hammerheads, lemon, bull, blacktip, cookiecutter),
nrow = 6, byrow = TRUE)
colnames(sharks) <- paste0('day_', seq(from = 1, to = dim(sharks)[2]))
rownames(sharks) <- c("tiger", "hammerheads", "lemon", "bull", "blacktip", "cookiecutter")
sharks
sharks5 <- sharks[ , 5]
sharks5
sharks5_logic <- sharks5 <= 2  &  sharks5 >= 4
sharks5_logic
sum(sharks5_logic)
sharks5_logic <- sharks5 <= 2  &  sharks5 >= 4
sharks5_logic
sharks5_logic <- sharks5 <= 2  |  sharks5 >= 4
sharks5_logic
sharks5_logic <- sharks5 <= 2  |  sharks5 >= 4
sharks5_logic
sum(sharks5_logic)
sharks[, 5]
sum(sharks[ ,5] <= 2 | sharks[ ,5] >= 4)
sharks
sharks5 <- sharks[ , 5]
sharks5
sharks[ , 5]
sharks5 <- sharks[ , 5]
sharks5
sharks5_logic <- sharks5 <= 2  |  sharks5 >= 4
sharks5_logic
sum(sharks5_logic)
sharks[ ,5]
sharks[ ,5] <= 2
sharks[ ,5] >= 4
sum(sharks[ ,5] <= 2 | sharks[ ,5] >= 4)
